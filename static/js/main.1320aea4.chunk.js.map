{"version":3,"sources":["Actions/index.js","Utils/index.js","Reducers/index.js","Components/ImageSelector/ImageSelector.js","Components/ImageResizer/ImageResizer.js","Components/ImageContainer/ImageContainer.js","Components/ImageGallery/ImageGallery.js","Components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["uploadImage","imgSrc","type","resizeAllImages","saveImage","imageType","imageSrc","dispatch","sendSaveRequest","formData","FormData","fetch","then","res","blob","file","File","append","method","headers","Authorization","body","response","json","console","log","imageLink","receiveSaveResponse","data","link","convertFileToImageSrc","Promise","resolve","reject","reader","FileReader","onload","event","target","result","readAsDataURL","convertImageToCanvas","img","width","height","canvas","document","createElement","getContext","drawImage","convertCanvasToImage","toDataURL","initialState","currentImageSrc","resizedImages","isSaving","rootReducer","combineReducers","imageInfo","state","action","currentImage","Image","src","forEach","push","ImageSelector","props","handleChange","e","files","validateImage","isValid","setState","isValidImage","catch","error","currentImg","requiredWidth","requiredHeight","className","name","accept","onChange","persist","this","Component","connect","ImageResizer","handleResize","isImageResized","class","onClick","to","ImageContainer","handleSave","href","ImageGallery","images","map","index","window","location","hash","key","Header","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","thunk","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1320aea4.chunk.js","sourcesContent":["export const UPLOAD_IMAGE = \"UPLOAD_IMAGE\";\nexport const RESIZE_ALL_IMAGES = \"RESIZE_ALL_IMAGES\";\nexport const RESIZE_IMAGE = \"RESIZE_IMAGE\";\nexport const CHANGE_DIMENSION = \"CHANGE_DIMENSION\";\nexport const SEND_SAVE_REQUEST = \"SEND_SAVE_REQUEST\";\nexport const RECEIVE_SAVE_RESPONSE = \"RECEIVE_SAVE_RESPONSE\";\n\nexport const uploadImage = (imgSrc) => ({\n    type: UPLOAD_IMAGE,\n    imgSrc\n})\n\nexport const resizeAllImages = () => ({\n    type: RESIZE_ALL_IMAGES\n})\n\nexport const sendSaveRequest = (imageType) => ({\n    type: SEND_SAVE_REQUEST,\n    imageType\n})\n\nexport const receiveSaveResponse = (imageType, imageLink) => ({\n    type: RECEIVE_SAVE_RESPONSE,\n    imageType,\n    imageLink\n})\n\nexport const saveImage = (imageType, imageSrc) => dispatch => {\n    dispatch(sendSaveRequest(imageType))\n    const formData = new FormData();\n    fetch(imageSrc)\n        .then(res => res.blob())\n        .then(blob => {\n            const file = new File([blob], \"File name\")\n            formData.append('image', file);\n            return fetch(\"https://api.imgur.com/3/image\", {\n                method: 'POST',\n                headers: {\n                    Authorization: \"Client-ID 7a775a29de38d93\"\n                },\n                body: formData\n            }).then((response) => response.json())\n            .then((res) => {\n                console.log(res)\n                dispatch(receiveSaveResponse(imageType, res.data.link))\n            });\n        })\n    console.log(\"inside save\");\n}\n","export const convertFileToImageSrc = (file) => {\n    return new Promise((resolve, reject) => {\n        let reader = new FileReader()\n        reader.onload = (event) => {\n            resolve(event.target.result);\n        }\n        reader.readAsDataURL(file);\n    })\n}\n\nexport const convertImageToCanvas = (img, width, height) => {\n    return new Promise((resolve,reject) => {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.getContext('2d').drawImage(img, 0, 0);\n        resolve(canvas);\n    })\n}\n\nexport const convertCanvasToImage = (canvas) => {\n    return new Promise((resolve, reject) => {\n        let imgSrc = canvas.toDataURL(\"image/png\");\n        resolve(imgSrc)\n    })\n}\n\nexport const convertImageSrcToFile = (imgSrc) => {\n    return new Promise((resolve, reject) => {\n        fetch(imgSrc)\n        .then(res => res.blob())\n        .then(blob => {\n            let file = new File([blob], \"File name\")\n            resolve(file)\n        })\n        .catch((error) => {\n            reject(error)\n        })\n    })\n}","import { UPLOAD_IMAGE, RESIZE_ALL_IMAGES, SEND_SAVE_REQUEST, RECEIVE_SAVE_RESPONSE } from '../Actions/index';\nimport { combineReducers } from 'redux';\nimport { convertImageToCanvas, convertCanvasToImage } from '../Utils';\nimport { saveImage } from '../Actions';\n\nlet initialState = {\n    currentImageSrc: \"\",\n    resizedImages: [\n        {\n            type: \"horizontal\",\n            width: 755,\n            height: 450,\n            imgSrc: \"\",\n            link: \"\",\n            isSaving: false\n        },\n        {\n            type: \"vertical\",\n            width: 365,\n            height: 450,\n            imgSrc: \"\",\n            link: \"\",\n            isSaving: false\n        },\n        {\n            type: \"horizontal_small\",\n            width: 365,\n            height: 212,\n            imgSrc: \"\",\n            link: \"\",\n            isSaving: false\n        },\n        {\n            type: \"gallery\",\n            width: 380,\n            height: 380,\n            imgSrc: \"\",\n            link: \"\",\n            isSaving: false\n        }\n    ]\n}\n\n\nconst imageInfo = (state = initialState, action) => {\n    let resizedImages = [];\n    switch(action.type) {\n        case UPLOAD_IMAGE:\n            console.log(action);\n            return {\n                ...state,\n                currentImageSrc: action.imgSrc\n            }\n        case RESIZE_ALL_IMAGES:\n            let currentImage = new Image();\n            currentImage.src = state.currentImageSrc;\n            state.resizedImages.forEach((imageInfo) => {\n                convertImageToCanvas(currentImage, imageInfo.width, imageInfo.height)\n                    .then((canvas) => {\n                        convertCanvasToImage(canvas)\n                            .then((imgSrc) => {\n                                resizedImages.push({\n                                    ...imageInfo,\n                                    imgSrc\n                                });\n                            });\n                    });\n            });\n\n            console.log(\"resized\", resizedImages)\n            return {\n                ...state,\n                resizedImages\n            }\n        case SEND_SAVE_REQUEST:\n            resizedImages = [];\n            state.resizedImages.forEach((imageInfo) => {\n                if(imageInfo.type === action.imageType) {\n                    saveImage(imageInfo);\n                    resizedImages.push({\n                        ...imageInfo,\n                        isSaving: true\n                    })\n                }else {\n                    resizedImages.push(imageInfo);\n                }\n            });\n\n            return {\n                ...state,\n                resizedImages\n            };\n        case RECEIVE_SAVE_RESPONSE:\n            resizedImages = [];\n            state.resizedImages.forEach((imageInfo) => {\n                if (imageInfo.type === action.imageType) {\n                    resizedImages.push({\n                        ...imageInfo,\n                        isSaving: false,\n                        link: action.imageLink\n                    })\n                } else {\n                    resizedImages.push(imageInfo);\n                }\n            });\n\n            return {\n                ...state,\n                resizedImages\n            };\n\n        default: \n            return state;\n    }\n}\n\nconst rootReducer = combineReducers({\n    imageInfo\n});\n\nexport default rootReducer;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { uploadImage } from '../../Actions';\nimport { convertFileToImageSrc } from '../../Utils';\nimport './image-selector.css';\n\nclass ImageSelector extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            isValidImage: \"\"\n        }\n    }\n\n    handleChange = (e) => {\n        convertFileToImageSrc(e.target.files[0])\n            .then((imgSrc) => {\n                this.validateImage(imgSrc)\n                .then((isValid)=> {\n                    if(isValid) {\n                        this.setState({isValidImage: true})\n                        this.props.dispatch(uploadImage(imgSrc));\n                    }\n                })\n                .catch((error) => {\n                    this.setState({isValidImage: false})\n                });        \n            });\n    }\n\n    validateImage = (imgSrc) => {\n        let currentImg = new Image();\n        return new Promise((resolve, reject) => {\n            currentImg.src = imgSrc;\n            currentImg.onload = () => {\n                if(currentImg.width !== this.props.requiredWidth || currentImg.height !== this.props.requiredHeight) {\n                    reject(false);\n                }else {\n                    console.log(\"valid size\")\n                    resolve(true);\n                }\n            }\n        });\n    }\n\n    render() {\n        console.log(\"image selector rendering\");\n        return (\n            <div className=\"container image-selector\">\n                <div className=\"file-upload-wrapper\">\n                    <button className=\"btn\">Upload an Image</button>\n                    <input type=\"file\" name=\"image\" className=\"image-selector__input\" \n                        accept=\"image/*\" onChange={(e) => {e.persist(); this.handleChange(e)}}></input>\n                </div>\n                {\n                    this.state.isValidImage === false &&\n                    <div>Image size should be {this.props.requiredWidth} * {this.props.requiredHeight}</div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default connect()(ImageSelector);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { resizeAllImages } from '../../Actions';\nimport ImageSelector from '../ImageSelector/ImageSelector';\nimport {Link} from 'react-router-dom';\nimport './image-resizer.css';\n\nclass ImageResizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isImageResized: false,\n            error: \"\"\n        }\n    }\n\n    handleResize = () => {\n        if(this.props.currentImageSrc) {\n            this.props.dispatch(resizeAllImages());\n            this.setState({isImageResized: true});\n        }\n    }\n\n    render() {\n        console.log(\"image resizer rendering\");\n        return (\n            <div class=\"container image-resizer\">\n                <div class=\"container image-resizer__actions\">\n                    <ImageSelector requiredWidth={1024} requiredHeight={1024}></ImageSelector>\n                    {\n                        this.props.currentImageSrc &&\n                        <button className=\"btn\" onClick={this.handleResize}>Resize</button>\n                    }\n                    {\n                        this.state.isImageResized &&\n                        <button className=\"btn\"><Link to=\"/gallery\">View Resized Images</Link></button>\n                    }\n                </div>\n                {\n                    this.props.currentImageSrc &&\n                    <div className=\"image-resizer__image\">\n                        <img src={this.props.currentImageSrc}></img>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    currentImageSrc: state.imageInfo.currentImageSrc\n})\n\nexport default connect(mapStateToProps)(ImageResizer);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { saveImage } from '../../Actions';\nimport './image-container.css';\n\nclass ImageContainer extends Component {\n\n    handleSave = (imageType, imageSrc) => {\n        this.props.dispatch(saveImage(imageType, imageSrc))\n    }\n\n    render() {\n        let { imageInfo } = this.props;\n        return (\n            <div className=\"container image-container\">\n                <div className=\"image-container__image\">\n                    <img src={imageInfo.imgSrc}></img>\n                </div>\n                <div class=\"image-container__save\">\n                    <button className={imageInfo.isSaving ? \"btn btn_disabled\" : \"btn\"} onClick={() => { this.handleSave(imageInfo.type, imageInfo.imgSrc) }}>Save</button>\n                </div>\n                {\n                    imageInfo.link &&\n                    <div className=\"image-container__link\">\n                        Image Link: <a href={imageInfo.link}>{imageInfo.link}</a>\n                    </div>\n                }\n                {\n                    imageInfo.isSaving &&\n                    <div className=\"loader\">\n                        <p>Saving Image...</p>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default connect()(ImageContainer);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { saveImage } from '../../Actions';\nimport ImageContainer from '../ImageContainer/ImageContainer';\nimport './image-gallery.css';\n\nclass ImageGallery extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"container image-gallery\">\n                {\n                    this.props.images.map((imageInfo, index) => {\n                        if(imageInfo.imgSrc == \"\") {\n                            window.location.hash = \"#/\";\n                        }\n                        return <ImageContainer imageInfo={imageInfo} key={index}></ImageContainer>\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    images: state.imageInfo.resizedImages\n})\n\nexport default connect(mapStateToProps)(ImageGallery);","import React from 'react';\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <div>IMAGE EDITOR</div>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reducer from './Reducers';\nimport { Provider } from 'react-redux';\nimport ImageResizer from './Components/ImageResizer/ImageResizer';\nimport ImageGallery from './Components/ImageGallery/ImageGallery';\nimport Header from './Components/Header/Header';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport thunk from 'redux-thunk';\nimport './Styles/common.css';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  reducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Header></Header>\n      <div className=\"App\">\n        <Router>\n          <Route exact path=\"/\" component={ImageResizer}></Route>\n          <Route exact path=\"/gallery\" component={ImageGallery}></Route>\n        </Router>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}